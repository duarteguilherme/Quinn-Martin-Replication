}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
# Quinn-Martin Replication
library(dplyr)
library(rstan)
setwd('~/Documentos/R/Quinn-Martin-Replication/')
T <- 47         # terms
J_total <- 29   # total number of justices
K_total <- 3450 # total number of cases
Q_case <- 53  # number of case-specific covariates
Q_justice <- 3  # number of justice-specific covariates
Q_term <- 6   # number of term-specific covariates
df_votes <- data.frame(matrix(NA, nrow=K_total, ncol=29))
df_votes$T <- NA # Define a column T for term
setwd('~/Documentos/R/Quinn-Martin-Replication/')
justices_per_term <- read.csv('adj.txt', sep='\t', header=FALSE, stringsAsFactors=FALSE)
colnames(justices_per_term) <- 1:29
row.names(justices_per_term) <- 1:47
list_terms_files <- list.files('./vote/', pattern='txt')
initial_df_line <- 1
setwd('./vote/')
# THere is an error on 1956.txt file.
# Adj matrix refers to 10 justices, but the file contains 11 columns.
# We're gonna correct it excluding the last column of the file.
# Verify with authors
for (i in 1:length(list_terms_files)) {
file <- list_terms_files[i]
current_term <- gsub(".txt","", file)
cases_term <- read.csv(file, header=FALSE, sep='\t',stringsAsFactors=FALSE)
current_justices <- which(justices_per_term[i,]!=-9)
final_df_line <- initial_df_line + nrow(cases_term) - 1
df_votes[initial_df_line:final_df_line,current_justices] <- cases_term
df_votes$T[initial_df_line:final_df_line] <- i
initial_df_line <- final_df_line + 1
}
# It's not easy to get along with missing data on Stan as it is on Jags so we must transform data
yy <- matrix(NA, ncol=4, nrow=(3450*29))
colnames(yy) <- c("cas","jus","y", "ter")
control <- 1
for (i in 1:3450) {
for (j in 1:29) {
yy[control,1] <- i
yy[control,2] <- j
yy[control,3] <- df_votes[i,j]
yy[control,4] <- df_votes[i, 30]
control <- control + 1
}
}
yy <- data.frame(yy)
yy <- filter(yy, y!=9)
yy <- na.omit(yy)
yy <- arrange(yy, jus)
yy <- yy[!duplicated(yy),]
str(yy)
df1 <- filter(yy, jus==1)
df2 <- filter(yy, jus==2)
df3 <- filter(yy, jus==3)
df1 <- filter(yy, jus==1)
df2 <- filter(yy, jus==2)
df3 <- filter(yy, jus==3)
data = list(N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, t1=df1$ter,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, t2=df2$ter,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, t3=df3$ter)
nrow(yy)
ncas <- nrow(df1) +nrow(df2) +nrow(df3)
ncas
unique(df1$jus)
df1$jus
length(unique(df1$ter))
length(unique(df2$ter))
length(unique(df3$ter))
# Define many values of K - numbers of terms for each justice
data = list(ncas,
K1=17, K2=18,K3=22,
N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, t1=df1$ter,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, t2=df2$ter,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, t3=df3$ter)
stanstr <-
'
data {
int<lower=0> N1;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (i in 1:N1){
y[i] ~ bernoulli(Phi_approx(x_1[ter1[i]]*beta1[cas1[i]] - beta0[cas1[i]]));
}
for (i in 1:N2){
y[i] ~ bernoulli(Phi_approx(x_2[ter2[i]]*beta1[cas2[i]] - beta0[cas2[i]]));
}
for (i in 1:N3){
y[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
# Define many values of K - numbers of terms for each justice
data = list(ncas,
K1=17, K2=18,K3=22,
N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, t1=df1$ter,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, t2=df2$ter,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, t3=df3$ter)
stanstr <-
'
data {
int<lower=0> ncas;
int<lower=0> K1;
int<lower=0> K2;
int<lower=0> K3;
int<lower=0> N1;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (i in 1:N1){
y[i] ~ bernoulli(Phi_approx(x_1[ter1[i]]*beta1[cas1[i]] - beta0[cas1[i]]));
}
for (i in 1:N2){
y[i] ~ bernoulli(Phi_approx(x_2[ter2[i]]*beta1[cas2[i]] - beta0[cas2[i]]));
}
for (i in 1:N3){
y[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
str(yy)
str(df1)
# Define many values of K - numbers of terms for each justice
data = list(ncas,
K1=17, K2=18,K3=22,
N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, ter1=df1$ter, y1=df1$y,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, ter2=df2$ter,y2=df2$y,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, ter3=df3$ter,y3=df3$y)
stanstr <-
'
data {
int<lower=0> ncas;
int<lower=0> K1;
int<lower=0> K2;
int<lower=0> K3;
int<lower=0> N1;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> y1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> y2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
int<lower=0> y3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (i in 1:N1){
y1[i] ~ bernoulli(Phi_approx(x_1[ter1[i]]*beta1[cas1[i]] - beta0[cas1[i]]));
}
for (i in 1:N2){
y2[i] ~ bernoulli(Phi_approx(x_2[ter2[i]]*beta1[cas2[i]] - beta0[cas2[i]]));
}
for (i in 1:N3){
y3[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
str(data)
# Define many values of K - numbers of terms for each justice
data = list(ncas=ncas,
K1=17, K2=18,K3=22,
N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, ter1=df1$ter, y1=df1$y,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, ter2=df2$ter,y2=df2$y,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, ter3=df3$ter,y3=df3$y)
stanstr <-
'
data {
int<lower=0> ncas;
int<lower=0> K1;
int<lower=0> K2;
int<lower=0> K3;
int<lower=0> N1;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> y1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> y2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
int<lower=0> y3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (i in 1:N1){
y1[i] ~ bernoulli(Phi_approx(x_1[ter1[i]]*beta1[cas1[i]] - beta0[cas1[i]]));
}
for (i in 1:N2){
y2[i] ~ bernoulli(Phi_approx(x_2[ter2[i]]*beta1[cas2[i]] - beta0[cas2[i]]));
}
for (i in 1:N3){
y3[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
# Define many values of K - numbers of terms for each justice
data = list(ncas=ncas,
K1=17, K2=18,K3=22,
N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, ter1=df1$ter, y1=df1$y,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, ter2=df2$ter,y2=df2$y,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, ter3=df3$ter,y3=df3$y)
stanstr <-
'
data {
int<lower=0> ncas;
int<lower=0> K1;
int<lower=0> K2;
int<lower=0> K3;
int<lower=0> N1;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> y1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> y2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
int<lower=0> y3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (a in 1:N1){
y1[a] ~ bernoulli(Phi_approx(x_1[ter1[a]]*beta1[cas1[a]] - beta0[cas1[a]]));
}
for (b in 1:N2){
y2[b] ~ bernoulli(Phi_approx(x_2[ter2[b]]*beta1[cas2[b]] - beta0[cas2[b]]));
}
for (i in 1:N3){
y3[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
data$y1
a <-1
data$ter1[1]
data$cas1[1]
ncas
data = list(ncas=ncas,
K1=17, K2=18,K3=22,
N1=nrow(df1), jus1=df1$jus, cas1=df1$cas, ter1=df1$ter, y1=df1$y,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, ter2=df2$ter,y2=df2$y,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, ter3=df3$ter,y3=df3$y)
stanstr <-
'
data {
int<lower=0> ncas;
int<lower=0> K1;
int<lower=0> K2;
int<lower=0> K3;
int<lower=0> N1;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> y1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> y2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
int<lower=0> y3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (a in 1:N1) {
y1[a] ~ bernoulli(Phi_approx(x_1[ter1[a]]*beta1[cas1[a]] - beta0[cas1[a]]));
}
for (b in 1:N2){
y2[b] ~ bernoulli(Phi_approx(x_2[ter2[b]]*beta1[cas2[b]] - beta0[cas2[b]]));
}
for (i in 1:N3){
y3[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
length(data$y1)
data$N1
# Define many values of K - numbers of terms for each justice
data = list(ncas=ncas,
K1=17, K2=18,K3=22,
NU=nrow(df1), jus1=df1$jus, cas1=df1$cas, ter1=df1$ter, y_1=df1$y,
N2=nrow(df2), jus2=df2$jus, cas2=df2$cas, ter2=df2$ter,y_2=df2$y,
N3=nrow(df3), jus3=df3$jus, cas3=df3$cas, ter3=df3$ter,y_3=df3$y)
stanstr <-
'
data {
int<lower=0> ncas;
int<lower=0> K1;
int<lower=0> K2;
int<lower=0> K3;
int<lower=0> NU;
int<lower=0> jus1;
int<lower=0> cas1;
int<lower=0> ter1;
int<lower=0> y_1;
int<lower=0> N2;
int<lower=0> jus2;
int<lower=0> cas2;
int<lower=0> ter2;
int<lower=0> y_2;
int<lower=0> N3;
int<lower=0> jus3;
int<lower=0> cas3;
int<lower=0> ter3;
int<lower=0> y_3;
}
parameters {
real beta0[ncas];
real beta1[ncas];
real x_1[K1];
real x_2[K2];
real x_3[K3];
}
model {
for (a in 1:NU) {
y_1[a] ~ bernoulli(Phi_approx(x_1[ter1[a]]*beta1[cas1[a]] - beta0[cas1[a]]));
}
for (b in 1:N2){
y2[b] ~ bernoulli(Phi_approx(x_2[ter2[b]]*beta1[cas2[b]] - beta0[cas2[b]]));
}
for (i in 1:N3){
y3[i] ~ bernoulli(Phi_approx(x_3[ter3[i]]*beta1[cas3[i]] - beta0[cas3[i]]));
}
x_1[1] ~ normal(0,1);
for (j in 2:K1) {
x_1[j] ~ normal(x_1[j-1], sigma);
}
x_2[1] ~ normal(0,1);
for (j in 2:K2) {
x_2[j] ~ normal(x_2[j-1], sigma);
}
x_3[1] ~ normal(0,1);
for (j in 2:K3) {
x_3[j] ~ normal(x_3[j-1], sigma);
}
beta1 ~ normal(0, 1);
beta0 ~ normal(0, 1);
}
'
fit <- stan(model_code = stanstr, data=data, iter=100000, warmup=2000, thin=10, chains=1)
